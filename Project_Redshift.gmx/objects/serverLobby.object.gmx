<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if passwordType {
    if passwordEnd = "|" {
        passwordEnd = "";
    } else {
        passwordEnd = "|";
    }
}
if shipNameType {
    if shipEnd = "|" {
        shipEnd = "";
    } else {
        shipEnd = "|";
    }
}
if portType {
    if portEnd = "|" {
        portEnd = "";
    } else {
        portEnd = "|";
    }
}
if sizeType {
    if sizeEnd = "|" {
        sizeEnd = "";
    } else {
        sizeEnd = "|";
    }
}
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
for(currentPlayer=0;currentPlayer&lt;global.numPlayers;currentPlayer++) {
    
}


if serverStarted {
    for (controllerTest = 0;controllerTest&lt;4;controllerTest++) {
        if gamepad_button_check(controllerTest,gp_start) {
            controllerTestContinue = true;
            controllerTestNum = 0;
            while controllerTestContinue and controllerTestNum &lt; 4 {
                if inputMethod[controllerTestNum] != "Controller" and inputMethod[controllerTestNum] != "Keyboard" and !controllerTaken[controllerTest] {
                    inputMethod[localPlayers] = "Controller";
                    controllerTaken[controllerTest] = true;
                    localPlayers++;
                    controllerTestContinue = false;
                } else {
                    controllerTestNum++;
                }
            }
             
        }
    }
    
    if keyboard_check(vk_space) {
        keyboardTestContinue = true;
        keyboardTestNum = 0;
        while keyboardTestContinue and keyboardTestNum &lt; 4 {
            if inputMethod[keyboardTestNum] != "Controller" and inputMethod[keyboardTestNum] != "Keyboard" and !keyboardTaken {
                inputMethod[localPlayers] = "Keyboard";
                keyboardPlayer = localPlayers;
                localPlayers++;
                keyboardTestContinue = false;
                keyboardTaken = true;
            } else {
                keyboardTestNum++;
            }
        }
    }
} else {
    if !passwordType and passwordEnd != "" {
        passwordEnd = "";
    } else {
    
    }
    if !shipNameType and shipEnd != ""{
        shipEnd = "";
    } else {
    
    }
    if !portType and portEnd != ""{
        portEnd = "";
    } else {
    
    }
    if !sizeType and sizeEnd != ""{
        sizeEnd = "";
    } else {
    
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if shipNameType and !typePause{
    if keyboard_check(vk_backspace) {
        serverSecondary[0] = removeLetter(serverSecondary[0]);
    } else {
        if string_length(serverSecondary[0]) &lt; 16 {
            serverSecondary[0] += addLetter();
        }
    }
    typePause = true;
    alarm[10] = 5;
}
if passwordType and !typePause{
    if keyboard_check(vk_backspace) {
        serverSecondary[1] = removeLetter(serverSecondary[1]);
    } else {
        if string_length(serverSecondary[1]) &lt; 16 {
            serverSecondary[1] += addLetter();
        }
    }
    typePause = true;
    alarm[10] = 5;
}
if portType and !typePause{
    if keyboard_check(vk_backspace) {
        serverSecondary[2] = removeLetter(serverSecondary[2]);
    } else {
        if string_length(serverSecondary[2]) &lt; 16 {
            serverSecondary[2] += addNumber(false);
        }
    }
    typePause = true;
    alarm[10] = 5;
}
if sizeType and !typePause{
    if keyboard_check(vk_backspace) {
        serverSecondary[3] = removeLetter(serverSecondary[3]);
    } else {
        if string_length(serverSecondary[3]) &lt; 2 {
            serverSecondary[3] += addNumber(false);
        }
    }
    typePause = true;
    alarm[10] = 5;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(MenuFont);

if shipNameType or passwordType or portType or sizeType {
    shipNameType = false;
    passwordType = false;
    portType = false;
    sizeType = false;
    if serverSecondary[0] = ""{
        serverSecondary[0] = wordHold;
    }
    if serverSecondary[2] = ""{
        serverSecondary[2] = wordHold;
    }
    if serverSecondary[3] = "" {
        serverSecondary[3] = wordHold;
    }
    if real(serverSecondary[3]) &lt; 3 {
        serverSecondary[3] = "3";   
    }
    if real(serverSecondary[3]) &gt; 32 {
        serverSecondary[3] = "32";
    }
    
    passwordEnd = "";
    shipEnd = "";
    portEnd = "";
    sizeEnd = "";
} else if window_view_mouse_get_x(0) &lt; view_xview[0] + string_width("Back") + 5 and window_view_mouse_get_y(0) &lt; view_yview[0] + string_height("Back") + 5 {
    room_goto(rmMain);
} else if serverStarted {

} else {
    if (selectedItem = item){
        switch serverOption[selectedItem] {
            case "Ship Name:":
                shipNameType = true;
                alarm[0] = 30;
                shipEnd = "|";
                wordHold = serverSecondary[0];
            break;
            case "Password:":
                passwordType = true;
                alarm[0] = 30;
                passwordEnd = "|";
            break;
            case "Port:":
                portType = true;
                alarm[0] = 30;
                portEnd = "|";
                wordHold = serverSecondary[2];
            break;
            case "Maximum Crew Size:":
                sizeType = true;
                alarm[0] = 30;
                sizeEnd = "|";
                wordHold = serverSecondary[3];
            break;
            case "":
                global.maxCrew = real(serverSecondary[3]);
                userDraw[0] = "0/" + string(global.maxCrew);
                for (i=1;i&lt;=global.maxCrew;i++) {
                    userDraw[i] = "";
                }
                instance_create(0,0,server);
                serverStarted = true;
                spaceshipName = serverSecondary[0];
                for (fontSize=0;fontSize&lt;7;fontSize++) {
                    draw_set_font(shipFont[fontSize]);
                    if string_width(spaceshipName) &lt; (view_wview[0] / 3){
                        shipNameFont = shipFont[fontSize];
                        fontSend = fontSize;
                        exit;
                        //fontSize = 7;
                    }
                }
                
            break;
        }
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>serverStarted = false;

lineWidth = 2;
localPlayers = 0;
serverOption[0] = "Ship Name:";
serverOption[1] = "Password:";
serverOption[2] = "Port:";
serverOption[3] = "Maximum Crew Size:";
serverOption[4] = "";

serverSecondary[0] = "Spaceship";
serverSecondary[1] = "";
serverSecondary[2] = "2014";
serverSecondary[3] = "6";
serverSecondary[4] = "Start Server";

draw_set_font(TitleFont);
titleHeight = string_height("Server Settings");

draw_set_font(MenuFont);
itemHeight = string_height("Item");

selectedItem = 0;

item = 0;

shipNameType = false;
passwordType = false;
portType = false;
sizeType = false;

typePause = false;

drawText = "";

passwordEnd = "";
shipEnd = "";
portEnd = "";
sizeEnd = "";

shipFont[0] = Arial64;
shipFont[1] = Arial56;
shipFont[2] = Arial48;
shipFont[3] = Arial40;
shipFont[4] = Arial32;
shipFont[5] = Arial24;
shipFont[6] = Arial18;


profileLabel[0] = "";
profileLabel[1] = "Input:";
profileLabel[2] = "Profile:";
profileLabel[3] = "Control Scheme:";
profileLabel[4] = "";

for (z=0;z&lt;4;z++) {
    profileOption[0,z] = 0;
    profileOption[1,z] = 0;
    profileOption[2,z] = 0;
    inputMethod[z] = "";
    controllerTaken[z] = false;
    ready[z] = false;
}

keyboardTaken = false;

randomize();
switch irandom(4) {
    case 0:
        bkgMainMenu = bkgSpace0;
    break;
    case 1:
        bkgMainMenu = bkgSpace1;
    break;
    case 2:
        bkgMainMenu = bkgSpace2;
    break;
    case 3:
        bkgMainMenu = bkgSpace3;
    break;
    case 4:
        bkgMainMenu = bkgSpace4;
    break;
}

player = 0;

view_xview[player] = global.playerViewX[player];
view_yview[player] = global.playerViewY[player];

view_wview[player] = global.playerViewWidth[player];
view_hview[player] = global.playerViewHeight[player];

view_xport[player] = global.playerPortX[player];
view_yport[player] = global.playerPortY[player];

view_wport[player] = global.playerPortWidth[player];
view_hport[player] = global.playerPortHeight[player];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
    
    //drawView(currentPlayer);
    
    /*draw_set_color(c_green);
    draw_rectangle(view_xview[currentPlayer],view_yview[currentPlayer],view_xview[currentPlayer] + view_wview[currentPlayer],view_yview[currentPlayer] + view_hview[currentPlayer],0);*/
    draw_background(bkgMainMenu,view_xview[currentPlayer],view_yview[currentPlayer]);
    draw_set_halign(fa_center);
    if serverStarted {
        draw_set_color(c_olive);
        draw_rectangle(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2,view_yview[currentPlayer],view_xview[currentPlayer] + view_wview[currentPlayer], view_yview[currentPlayer] + view_hview[currentPlayer],0);
        draw_set_color(c_default);
        draw_rectangle(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2 - lineWidth,view_yview[currentPlayer],view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2 + lineWidth, view_yview[currentPlayer] + view_hview[currentPlayer],0);
        
        draw_rectangle(view_xview[currentPlayer],view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) - lineWidth,view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2,view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) + lineWidth,0);
        draw_rectangle(view_xview[currentPlayer],view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * 2 - lineWidth,view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2,view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * 2 + lineWidth,0);
        draw_rectangle(view_xview[currentPlayer],view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * 3- lineWidth,view_xview[currentPlayer] + (view_wview[currentPlayer] / 3) * 2,view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * 3 + lineWidth,0); 
        
        
        
        draw_set_font(MenuFont);
        for (t=0;t&lt;4;t++) {
            if t &lt; localPlayers {
                if !ready[t] and inputMethod[t] = "Keyboard" {
                    if mouse_y &gt; keyboardPlayer * (view_hview[currentPlayer] / 4) and mouse_y &lt; (keyboardPlayer + 1) * (view_hview[currentPlayer] / 4) and mouse_x &lt; view_wview[currentPlayer] / 1.5{
                        item = floor((view_yview[currentPlayer] + mouse_y - (keyboardPlayer * (view_hview[currentPlayer] / 4) )/* - titleHeight*/) / itemHeight);
                        
                        if item &gt;= array_length_1d(serverSecondary) {
                            selectedItem = array_length_1d(serverSecondary) - 1;
                        } else if item &lt; 0 {
                            selectedItem = 0;
                        } else {
                            selectedItem = item;
                        }   
                    } else {
                        item = array_length_1d(serverOption);
                    }
                } else {
                    item = array_length_1d(serverOption);
                }
                
                draw_set_halign(fa_right);
                for(s=0;s&lt;array_length_1d(profileLabel);s++) {
                    if s = item and inputMethod[t] = "Keyboard" {
                        draw_set_color(c_selected);
                    } else {
                        draw_set_color(c_default);
                    }
                    draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5 + string_height("Profile") * s,profileLabel[s]);
                }
                
                
                draw_set_halign(fa_center);
                if item = 0 and inputMethod[t] = "Keyboard"{
                    draw_set_color(c_selected);    
                } else {
                    draw_set_color(c_default);
                }
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5,"Cancel");
                draw_set_halign(fa_left);
                if item = 1 and inputMethod[t] = "Keyboard"{
                    draw_set_color(c_selected);    
                } else {
                    draw_set_color(c_default);
                }
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5 + string_height("Profile:"),inputMethod[t]);
                if item = 2 and inputMethod[t] = "Keyboard"{
                    draw_set_color(c_selected);    
                } else {
                    draw_set_color(c_default);
                }
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5 + string_height("Profile:") * 2,global.profileName[profileOption[0,t]]);
                if item = 3 and inputMethod[t] = "Keyboard"{
                    draw_set_color(c_selected);    
                } else {
                    draw_set_color(c_default);
                }
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5 + string_height("Profile:") * 3,global.schemeName[profileOption[1,t]]); 
                if item = 4 and inputMethod[t] = "Keyboard"{
                    draw_set_color(c_selected);    
                } else {
                    draw_set_color(c_default);
                }
                draw_set_halign(fa_center);
                if t = 0 {
                   readyText = "Start Game";
                } else {
                   readyText = "Ready";
                }
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 5 + string_height("Profile:") * 4,readyText);     
            } else {
                draw_set_color(c_default);
                draw_set_halign(fa_center);
                draw_set_font(TitleFont);
                joinText = "Press Start or Space to join";
                draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 3),view_yview[currentPlayer] + (view_hview[currentPlayer] / 4) * t + 50,joinText);     
            }
        }
        
        
        draw_set_halign(fa_center);
        draw_set_font(shipNameFont);
        draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 6) * 5,view_yview[currentPlayer] + 5,spaceshipName);
        shipNameDisplacement = string_height(spaceshipName);
        draw_set_font(Arial24);
        for (drawUser=0;drawUser&lt;=global.maxCrew;drawUser++) {
            draw_text(view_xview[currentPlayer] + (view_wview[currentPlayer] / 6) * 5,view_yview[currentPlayer] + 10 + shipNameDisplacement + string_height(userDraw[drawUser]) * drawUser,userDraw[drawUser]);
        }
        
    } else {
        if !shipNameType and !passwordType and !portType and !sizeType and (window_view_mouse_get_x(currentPlayer) &gt; view_xview[currentPlayer]) and (window_view_mouse_get_x(currentPlayer) &lt; view_xview[currentPlayer] + view_wview[currentPlayer]) and (window_view_mouse_get_y(currentPlayer) &gt; view_yview[currentPlayer]) and (window_view_mouse_get_y(currentPlayer) &lt; view_yview[currentPlayer] + view_hview[currentPlayer]) { 
                
            item = floor((view_yview[currentPlayer] + window_view_mouse_get_y(currentPlayer) - titleHeight) / itemHeight);
            
            if item &gt;= array_length_1d(serverSecondary) {
                selectedItem = array_length_1d(serverSecondary) - 1;
            } else if item &lt; 0 {
                selectedItem = 0;
            } else {
                selectedItem = item;
            }
        }
        draw_set_color(c_default);
        draw_set_font(TitleFont);
        draw_set_halign(fa_center);
        draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer],"Server Settings")
        
        draw_set_font(MenuFont);
        draw_set_halign(fa_right);
        
        
        
        for(leftDraw=0;leftDraw&lt;array_length_1d(serverOption);leftDraw++) {
            draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + titleHeight + leftDraw * itemHeight,serverOption[leftDraw]);
        }
        draw_set_halign(fa_left);
        
        for(rightDraw=0;rightDraw&lt;array_length_1d(serverOption);rightDraw++) {
            if rightDraw = selectedItem {
                draw_set_color(c_selected);
            } else {
                draw_set_color(c_default);
            }
            if serverSecondary[rightDraw] = "Start Server" {
                draw_set_halign(fa_center);    
            }
            switch serverOption[rightDraw] {
                case "Ship Name:":
                    if shipNameType {
                        drawText = serverSecondary[rightDraw] + shipEnd;
                    } else {
                        drawText = serverSecondary[rightDraw];
                    }
                break;
                case "Password:":
                    if passwordType {
                        drawText = serverSecondary[rightDraw] + passwordEnd;
                    } else {
                        drawText = serverSecondary[rightDraw];
                    }
                break;
                case "Port:":
                    if portType {
                        drawText = serverSecondary[rightDraw] + portEnd;
                    } else {
                        drawText = serverSecondary[rightDraw];
                    }
                break;
                case "Maximum Crew Size:":
                    if sizeType {
                        drawText = serverSecondary[rightDraw] + sizeEnd;
                    } else {
                        drawText = serverSecondary[rightDraw];
                    }
                break;
                case "":
                    drawText = serverSecondary[rightDraw];
                break;
            }
            draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + titleHeight + rightDraw * itemHeight,drawText);
        }
    }
    draw_set_font(MenuFont);
    draw_set_color(c_default);
    draw_set_halign(fa_left);
    draw_text(view_xview[currentPlayer] + 5,view_yview[currentPlayer] + 5,"Back");
    draw_set_color(c_default);
    
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
