<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !selectAble {
    if endCursor = "" {
        endCursor = "|"
    } else {
        endCursor = ""
    }
    
    alarm[6] = 30;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>letterHold = addLetter()

/*if letterHold = "" and !keyboard_check(vk_backspace){
    typePause = false;
    alarm[10] = -1;
} else {
    typePause = true;
    alarm[10] = 5;
}*/

if type[0] and !typePause {
    if lobbyOption[0] = "Ship Name:" {
        if keyboard_check(vk_backspace) {
            if string_length(lobbySecondary[selectedItem]) &gt; 0 {
                lobbySecondary[selectedItem] = removeLetter(lobbySecondary[selectedItem]);
            }
        } else {
            if string_length(lobbySecondary[selectedItem]) &lt; 16 {
                lobbySecondary[selectedItem] += addLetter();
            }
        }
    } else {
        if keyboard_check(vk_backspace) {
            if string_length(lobbySecondary[selectedItem]) &gt; 0 {
                lobbySecondary[selectedItem] = removeLetter(lobbySecondary[selectedItem]);
            }
        } else {
            if string_length(lobbySecondary[selectedItem]) &lt; 16 {
                lobbySecondary[selectedItem] += addNumber(true);
            }
        }
    }
} else if type[1] and !typePause {
    if keyboard_check(vk_backspace) {
        if string_length(lobbySecondary[selectedItem]) &gt; 0 {
            lobbySecondary[selectedItem] = removeLetter(lobbySecondary[selectedItem]);
        }
    } else {
        if string_length(lobbySecondary[selectedItem]) &lt; 16 {
            lobbySecondary[selectedItem] += addLetter();
        }
    }

} else if type[2] and !typePause {
    if keyboard_check(vk_backspace) {
        if string_length(lobbySecondary[selectedItem]) &gt; 0 {
            lobbySecondary[selectedItem] = removeLetter(lobbySecondary[selectedItem]);
        }
    } else {
        if string_length(lobbySecondary[selectedItem]) &lt; 6 {
            lobbySecondary[selectedItem] += addNumber(false);
        }
    }
} if type[3] and !typePause {
    if keyboard_check(vk_backspace) {
        if string_length(lobbySecondary[selectedItem]) &gt; 0 {
            lobbySecondary[selectedItem] = removeLetter(lobbySecondary[selectedItem]);
        }
    } else {
        if string_length(lobbySecondary[selectedItem]) &lt; 2 {
            lobbySecondary[selectedItem] += addNumber(false);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
alarm[10] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(MenuFont);
if (mouse_x &lt; string_width("Back") + 5) and (mouse_y &lt; string_height("Back") + 5) {
    room_goto(rmMain);
} else {
    switch lobbyOption[selectedItem] {
        case "Ship Name:":
            if selectAble {
                selectAble = false;
                type[0] = true;
                endCursor = "|";
                alarm[6] = 30;
                hold = lobbySecondary[selectedItem];
            } else {
                selectAble = true;
                type[0] = false;
                endCursor = "";
                if lobbySecondary[selectedItem] = "" {
                    lobbySecondary[selectedItem] = hold;
                }
            }
        break;
        case "IP:":
            if selectAble {
                selectAble = false;
                type[0] = true;
                endCursor = "|";
                alarm[6] = 30;
                hold = lobbySecondary[selectedItem];
            } else {
                selectAble = true;
                type[0] = false;
                endCursor = "";
                if lobbySecondary[selectedItem] = "" {
                    lobbySecondary[selectedItem] = hold;
                }
            }
        
        break;
        case "Password:":
            
            if selectAble {
                selectAble = false;
                type[1] = true;
                endCursor = "|";
                alarm[6] = 30;
            } else {
                selectAble = true;
                type[1] = false;
                endCursor = "";
            }
            
            if global.host {
            
            } else {
            
            }    
        break;
        case "Port:":
        
            if selectAble {
                selectAble = false;
                type[2] = true;
                endCursor = "|";
                alarm[6] = 30;
                hold = lobbySecondary[selectedItem];
            } else {
                selectAble = true;
                type[2] = false;
                endCursor = "";
                if lobbySecondary[selectedItem] = "" {
                    lobbySecondary[selectedItem] = hold;
                }
            }
            if global.host {
            
            } else {
            
            }
        break;
        case "Maximum Crew Size:":
            if selectAble {
                selectAble = false;
                type[3] = true;
                endCursor = "|";
                alarm[6] = 30;
                hold = lobbySecondary[selectedItem];
            } else {
                selectAble = true;
                type[3] = false;
                endCursor = "";
                if lobbySecondary[selectedItem] = "" {
                    lobbySecondary[selectedItem] = hold;
                }
            }
        
        break;
        case "":
            lobbyActivated = true;
            if global.host {
            
            } else {
            
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lobbyActivated = false;
keyboardTaken = false;
endString = "";
endCursor = "|";
selectedItem = 0;
nameType = false;
nameType = false;
nameType = false;
//type = false;
selectAble = true;
typePause = false;

draw_set_valign(fa_center);
randomize();
switch irandom(4) {
    case 0:
        bkgMainMenu = bkgSpace0;
    break;
    case 1:
        bkgMainMenu = bkgSpace1;
    break;
    case 2:
        bkgMainMenu = bkgSpace2;
    break;
    case 3:
        bkgMainMenu = bkgSpace3;
    break;
    case 4:
        bkgMainMenu = bkgSpace4;
    break;
}

view_xview[0] = global.playerViewX[0];
view_yview[0] = global.playerViewY[0];

view_wview[0] = global.playerViewWidth[0];
view_hview[0] = global.playerViewHeight[0];

view_xport[0] = global.playerPortX[0];
view_yport[0] = global.playerPortY[0];

view_wport[0] = global.playerPortWidth[0];
view_hport[0] = global.playerPortHeight[0];

for (playerCount=0;playerCount&lt;4;playerCount++) {
    playedJoined[playerCount] = false;
}

if global.host {
    lobbyTitle = "Host Server";
    lobbyOption[0] = "Ship Name:";
    lobbyOption[1] = "Password:";
    lobbyOption[2] = "Port:";
    lobbyOption[3] = "Maximum Crew Size:";
    lobbyOption[4] = "";
    
    lobbySecondary[0] = "Spaceship";
    lobbySecondary[1] = "";
    lobbySecondary[2] = "2014";
    lobbySecondary[3] = "6";
    lobbySecondary[4] = "Start Server";
} else {
    lobbyTitle = "Join Server";
    lobbyOption[0] = "IP:";
    lobbyOption[1] = "Password:";
    lobbyOption[2] = "Port:";
    lobbyOption[3] = "";
    //lobbyOption[4] = "";
    
    lobbySecondary[0] = "127.0.0.1";
    lobbySecondary[1] = "";
    lobbySecondary[2] = "2014";
    lobbySecondary[3] = "Join Server";
    //lobbySecondary[4] = "";
}

for (i=0;i&lt;array_length_1d(lobbyOption);i++) {
    type[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
    draw_background(bkgMainMenu,view_xview[currentPlayer],view_yview[currentPlayer]);
    draw_set_font(MenuFont);
    draw_set_color(c_default);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(view_xview[currentPlayer] + 5,view_yview[currentPlayer] + 5,"Back");
    
    draw_set_valign(fa_center);
    
    if lobbyActivated {
        draw_background(bkgStars,view_wview[0] / 3 * 2,0);
        draw_line_width_color(view_wview[0] / 3 * 2,0,view_wview[0] / 3 * 2,view_hview[0],5,c_white,c_white);
        for (playerCount=0;playerCount&lt;4;playerCount++) {
            draw_line_width_color(view_xview[0],view_hview[0] / 4 * playerCount,view_wview[0] / 3 * 2,view_hview[0] / 4 * playerCount,5,c_white,c_white);
            if playedJoined[playerCount] {
            
            } else {
                draw_set_font(TitleFont);
                draw_set_halign(fa_center);
                if keyboardTaken {
                    draw_text(view_wview[0] / 3,view_hview[0] / 4 * playerCount + view_hview[0] / 8,"Press Start#to Join");
                } else {
                    draw_text(view_wview[0] / 3,view_hview[0] / 4 * playerCount + view_hview[0] / 8,"Press Start or#Space to Join");
                }
            }
        }
    } else {
    draw_set_color(c_default);
        draw_set_font(TitleFont);
        draw_set_halign(fa_center);
        //draw_set_valign(fa_top);
        draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + string_height(lobbyTitle) / 2,lobbyTitle)
        titleHeight = string_height(lobbyTitle) + 20;
        draw_set_font(MenuFont);
        
        itemHeight = string_height("String Height");
        
        if selectAble and (window_view_mouse_get_x(currentPlayer) &gt; view_xview[currentPlayer]) and (window_view_mouse_get_x(currentPlayer) &lt; view_xview[currentPlayer] + view_wview[currentPlayer]) and (window_view_mouse_get_y(currentPlayer) &gt; view_yview[currentPlayer]) and (window_view_mouse_get_y(currentPlayer) &lt; view_yview[currentPlayer] + view_hview[currentPlayer]) { 
                        
            item = round((view_yview[currentPlayer] + window_view_mouse_get_y(currentPlayer) - titleHeight) / itemHeight);
            
            if item &gt;= array_length_1d(lobbySecondary) {
                selectedItem = array_length_1d(lobbySecondary) - 1;
            } else if item &lt; 0 {
                selectedItem = 0;
            } else {
                selectedItem = item;
            }
        }
        
        
        
        
        for(drawCount=0;drawCount&lt;array_length_1d(lobbyOption);drawCount++) {
            
            draw_set_halign(fa_right);
            draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + titleHeight + drawCount * itemHeight,lobbyOption[drawCount]);
            if lobbyOption[drawCount] = "" {
                draw_set_halign(fa_center);   
                if drawCount = selectedItem {
                    draw_sprite(sprSelectLeft,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 - string_width(lobbySecondary[selectedItem]) / 2 - 8 - cos(0.25 * degtorad(current_time)),view_yview[currentPlayer] + titleHeight + itemHeight*drawCount);
                    draw_sprite(sprSelectRight,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 + string_width(lobbySecondary[selectedItem]) / 2 + cos(0.25 * degtorad(current_time)),view_yview[currentPlayer] + titleHeight + itemHeight*drawCount);
                } 
                endString = "";
            } else {
                if type[drawCount] {
                    endString = endCursor;
                } else {
                    endString = "";
                }
                draw_set_halign(fa_left);
                if drawCount = selectedItem {
                    draw_sprite(sprSelectLeft,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 - string_width(lobbyOption[selectedItem]) - 8 - cos(0.25 * degtorad(current_time)),view_yview[currentPlayer] + titleHeight + itemHeight*drawCount);
                    draw_sprite(sprSelectRight,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 + string_width(lobbySecondary[selectedItem]) + cos(0.25 * degtorad(current_time)) + string_width(endString),view_yview[currentPlayer] + titleHeight + itemHeight*drawCount);
                }
                
            }
            draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + titleHeight + drawCount * itemHeight,lobbySecondary[drawCount] + endString);
            
            
        }
        draw_set_halign(fa_left);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
