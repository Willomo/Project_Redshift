<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if nameEnabled {
    if nameEndString = "|" {
        nameEndString = "";
    } else {
        nameEndString = "|";
    }
    alarm[11] = 30;
} else {
    nameEndString = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if !nameEnabled and nameEndString != "" {
    nameEndString = "";
}

for (currentPlayer = 0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
    testControl(currentPlayer);
    if global.pause[currentPlayer] {
        if controlRebind {
           rebindControl(0);   
        }
        if !nameEnabled and !controlRebind{
            if menuControls[currentPlayer] = "Mouse"{
                draw_set_font(TitleFont);
                titleDisplacement = string_height(titleText[currentPlayer]) + 20;
                draw_set_font(MenuFont);
                itemDisplament = string_height(menuItem[currentMenu[currentPlayer],currentItem[currentMenu[currentPlayer],currentPlayer]]);
                if (window_view_mouse_get_x(currentPlayer) &gt; view_xview[currentPlayer]) and (window_view_mouse_get_x(currentPlayer) &lt; view_xview[currentPlayer] + view_wview[currentPlayer]) and (mouse_y &gt; view_yview[currentPlayer]) and (mouse_y &lt; view_yview[currentPlayer] + view_hview[currentPlayer]) { 
                    
                    item = round((mouse_y - view_yview[currentPlayer] /*window_view_mouse_get_y(currentPlayer)*/ - titleDisplacement) / itemDisplament);
                    
                    if item &gt;= array_length_2d(menuItem,currentMenu[currentPlayer]) {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = array_length_2d(menuItem,currentMenu[currentPlayer]) - 1;
                    } else if item &lt; 0 {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = 0;
                    } else {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = item;
                    }
                }
                /*if (mouse_x &gt; view_xview[currentPlayer]) and (mouse_x &lt; view_xview[currentPlayer] + view_wview[currentPlayer]) and (mouse_y &gt; view_yview[currentPlayer]) and (mouse_y &lt; view_yview[currentPlayer] + view_hview[currentPlayer]) { 
                    
                    item = floor((view_hview[currentPlayer] + mouse_y - titleDisplacement) / itemDisplament);
                    
                    if item &gt;= array_length_2d(menuItem,currentMenu[currentPlayer]) {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = array_length_2d(menuItem,currentMenu[currentPlayer]) - 1;
                    } else if item &lt; 0 {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = 0;
                    } else {
                        currentItem[currentMenu[currentPlayer],currentPlayer] = item;
                    }
                }*/
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>letterHold = addLetter()

if letterHold = "" and !keyboard_check(vk_backspace){
    typePause = false;
    alarm[10] = 0;
}

if nameEnabled and !typePause{
    if keyboard_check(vk_backspace) {
        
        switch currentMenu[0] {
            case profiles: 
                if string_length(global.profileName[currentProfile]) &gt; 0 {
                    global.profileName[currentProfile] = removeLetter(global.profileName[currentProfile]);
                }
            break;
            case controls: 
                if string_length(global.schemeName[currentScheme]) &gt; 0 {
                    global.schemeName[currentScheme] = removeLetter(global.schemeName[currentScheme]);
                }
            break;
            
        }
        
    } else {
        
        switch currentMenu[0] {
            case profiles: 
                if string_length(global.profileName[currentProfile]) &lt; 16 {
                    global.profileName[currentProfile] += addLetter();
                }
            break;
            case controls: 
                if string_length(global.schemeName[currentScheme]) &lt; 16 {
                    global.schemeName[currentScheme] += addLetter();
                }
            break;
        }
    }
    
    typePause = true;
    alarm[10] = 5;
}

/*if controlRebind {
    controlRebind = false;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
alarm[10] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="58">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouseRebind {
    mouseRebind = false;
} else {
    for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
        if nameEnabled {
            nameEnabled = false;
        } else {
            switch menuItem[currentMenu[currentPlayer],currentItem[currentMenu[currentPlayer],currentPlayer]]  {
                case "Voice":
                    sayYes(global.profileVoice[currentProfile]);
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouseRebind {
    mouseRebind = false;
} else {
    for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
        if nameEnabled {
            nameEnabled = false;
        } else {
            switch menuItem[currentMenu[currentPlayer],currentItem[currentMenu[currentPlayer],currentPlayer]]  {
                case "Voice":
                    if global.profileVoice[currentProfile] = 0 {
                        global.profileVoice[currentProfile] = array_length_1d(voice) - 1;
                    } /*else if {
                    
                    } */else {
                        global.profileVoice[currentProfile]--;
                    }
                    sayYes(global.profileVoice[currentProfile]);
                    saveProfile(currentProfile);
                break;
                case "Fullscreen":
                    if fullscreen = "On" {
                        fullscreen = "Off";
                    } else if fullscreen = "Off" {
                        fullscreen = "On";
                    }
                break;
                case "Control Scheme":
                    switch currentMenu[currentPlayer] {
                        case controls:
                            if currentScheme = 0 {
                                currentScheme = 9;
                            } else {
                                currentScheme--;
                            }
                        break;
                        case profiles:
                            if global.profileControlScheme[currentProfile] = 0 {
                                global.profileControlScheme[currentProfile] = 9;
                            } else {
                                global.profileControlScheme[currentProfile]--;
                            }
                            saveProfile(currentProfile);
                        break;
                    }
                break;
                case "Profile":
                    if currentProfile = 0 {
                        currentProfile = 9;
                    } else {
                        currentProfile--;
                    }
                break;
                case "Aspect Ratio":
                    if aspect = 0 {
                        aspect = array_length_1d(aspectList) - 1;
                    } else {
                        aspect--;
                    }
                    resolution = 0;
                break;
                case "Resolution":
                    if resolution = 0 {
                        resolution = array_length_2d(resolutionList,aspect) - 1;
                    } else {
                        resolution--;
                    }
                break;
            }
            
            titleText[currentPlayer] = titleList[currentMenu[currentPlayer]];
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouseRebind {
    mouseRebind = false;
} else {
    for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
        if global.pause[currentPlayer] and item = currentItem[currentMenu[currentPlayer],currentPlayer] {
           selectMenuItem(currentPlayer);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if nameEnabled or controlRebind {

} else {
    switch menuItem[currentMenu[0],currentItem[currentMenu[0],0]]  {
        case "Master Volume":
            if global.masterVolume &gt; 0 {
                global.masterVolume--;
            }
        break;
        case "Music Volume":
            if global.musicVolume &gt; 0 {
                global.musicVolume--;
                audio_sound_gain(global.currentMusic,global.musicVolume / 100,0);
            }
        break;
        case "Effects Volume":
            if global.effectsVolume &gt; 0 {
                global.effectsVolume--;
            }
        break;
        case "Voice Volume":
            if global.voiceVolume &gt; 0 {
                global.voiceVolume--;
            }
        break;
        case "Space Sounds":
            drawItem += ":On";
        break;
        case "":
        
        break;
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if nameEnabled or controlRebind {

} else {
    switch menuItem[currentMenu[0],currentItem[currentMenu[0],0]]  {
        case "Master Volume":
            if global.masterVolume &lt; 100 {
                global.masterVolume++;
            }
        break;
        case "Music Volume":
            if global.musicVolume &lt; 100 {
                global.musicVolume++;
                audio_sound_gain(global.currentMusic,global.musicVolume / 100,0);
            }
        break;
        case "Effects Volume":
            if global.effectsVolume &lt; 100 {
                global.effectsVolume++;
            }
        break;
        case "Voice Volume":
            if global.voiceVolume &lt; 100 {
                global.voiceVolume++;
            }
        break;
        case "Space Sounds":
            drawItem += ":On";
        break;
        case "":
        
        break;
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initialiseMenu();
initialiseVideo();


randomize();
switch irandom(4) {
    case 0:
        bkgMainMenu = bkgSpace0;
    break;
    case 1:
        bkgMainMenu = bkgSpace1;
    break;
    case 2:
        bkgMainMenu = bkgSpace2;
    break;
    case 3:
        bkgMainMenu = bkgSpace3;
    break;
    case 4:
        bkgMainMenu = bkgSpace4;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//numPlayers is 0-3

global.numPlayers = 0;


initialiseMenu();
initialiseVideo();
initialiseAudio();

playMusic(-1)
global.version = "Pre-Alpha 0.0.1";

mouseRebind = false;

loadControls();
loadProfiles();

scrGlobalVariables();

global.upKey1ID = ord("W");
global.upKey1Mask = "W";
global.upKey1Type = "Keyboard";
global.downKey1ID = ord("S");
global.downKey1Mask = "S";
global.downKey1Type = "Keyboard";
global.leftKey1ID = ord("A");
global.leftKey1Mask = "A";
global.leftKey1Type = "Keyboard";
global.rightKey1ID = ord("D");
global.rightKey1Mask = "D";
global.rightKey1Type = "Keyboard";




/*
idPlayer[0] = "Player 1"
idPlayer[1] = "Player 2"
idPlayer[2] = "Player 3"
idPlayer[3] = "Player 4"
*/

voice[0] = "Adrian";
voice[1] = "Elizabeth";
voice[2] = "Xander";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
    
    if global.pause[currentPlayer]{
        drawView(currentPlayer);
        if currentMenu[currentPlayer] = main {
            draw_set_halign(fa_left);
            draw_set_font(Arial12);
            draw_set_color(c_default);
            draw_text(view_xview[currentPlayer] + 5,view_yview[currentPlayer] + 10,global.version);
        }
        
            
            
            /*view_hborder[currentPlayer] = 5;
            view_vborder[currentPlayer] = 5;*/
            
        if (view_current = currentPlayer) {
            draw_set_valign(fa_center);
            draw_set_halign(fa_center);
            draw_set_font(TitleFont);
            draw_set_color(c_default);
            draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + string_height(titleText[currentPlayer]) / 2,titleText[currentPlayer]);
            titleDisplacement = string_height( titleText[currentPlayer]) + 20;
            draw_set_font(MenuFont);
            for (menuDraw=0;menuDraw&lt;array_length_2d(menuItem,currentMenu[currentPlayer]);menuDraw++) {
                itemDisplament = string_height(menuItem[currentMenu[currentPlayer],menuDraw]);
                
                
                
                
                drawItem = menuItem[currentMenu[currentPlayer],menuDraw];
                drawItem = drawSubItem(drawItem);
                draw_set_color(c_default)
                if menuDraw = currentItem[currentMenu[currentPlayer],currentPlayer] {
                    //draw_set_color(c_selected);
                    draw_sprite(sprSelectLeft,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 - string_width(drawItem) / 2 - 8 - cos(0.25 * degtorad(current_time)),view_yview[currentPlayer] + titleDisplacement + itemDisplament*menuDraw);
                    draw_sprite(sprSelectRight,0,view_xview[currentPlayer] + view_wview[currentPlayer] / 2 + string_width(drawItem) / 2 + cos(0.25 * degtorad(current_time)),view_yview[currentPlayer] + titleDisplacement + itemDisplament*menuDraw);
                    
                } else {
                    draw_set_color(c_default);
                }
                draw_text(view_xview[currentPlayer] + view_wview[currentPlayer] / 2,view_yview[currentPlayer] + titleDisplacement + itemDisplament*menuDraw,drawItem);
                draw_set_color(c_black);
            }
        }
    }
    
    /*if (view_current = 0) {
    currentPlayer = 0;
    
    
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rmMain {
    if nameEnabled or controlRebind {
        nameEnabled = false;
    } else {
        for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
            switch currentMenu[currentPlayer] {
                case settings:
                case profiles:
                case play:
                    currentMenu[currentPlayer] = root[currentPlayer];                
                break;
                case gameplay:
                case controls:
                case video:
                case audio:
                    currentMenu[currentPlayer] = settings;                
                break;
            }
            titleText[currentPlayer] = titleList[currentMenu[currentPlayer]];          
        }
    }
} else {
    for(currentPlayer=0;currentPlayer&lt;=global.numPlayers;currentPlayer++) {
        if global.pause[currentPlayer] = false {
            global.pause[currentPlayer] = true;
        } else {
            global.pause[currentPlayer] = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>typePause = false;
alarm[10] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
