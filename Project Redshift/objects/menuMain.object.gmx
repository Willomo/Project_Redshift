<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//window_s_fullscreen = true;
texttt = "";
//global.pause = false;

global.numPlayers = 4;

menuControl = 0;

screenShake = 0;

version = "Pre-Alpha 0.0.1";

for (i=0;i&lt;4;i++) {
    menuEnabled[i] = true;
    selectEnabled[i] = true;
    subEnabled[0] = true;
    subChanged[i] = true;
    global.menuSwitch[i] = false;
}


controllerThreshold = 0.5;

resX = display_get_width();
resY = display_get_height();

workingAreaX = display_get_width();
workingAreaY = display_get_height();

vertMove = 0;
horizMove = 0;
select = 0;

prevMouseX = mouse_x;
prevMouseY = mouse_y;

leftReleased = false;

i=1;
notbreak = true;
while (i&lt;=resY) and notbreak {
    if (resY/i - resY div i = 0) {
        temp = resX/resY*i;
        if (temp div 1 = temp) {
            autoRatio = string(temp) + ":" + string(i);
            notbreak = false;
        } else {
            i++;
        }
    } else {
        i++;
    }
}
if autoRatio = "683:384" {
    autoRatio = "16:9";
}

autoResolution = string(display_get_width()) + "x" + string(display_get_height());

for (u=0;u&lt;4;u++) {    
    currentItem[0,u] = 0;
    currentItem[1,u] = 0;
    currentItem[2,u] = 0;
    currentItem[3,u] = 0;
    currentItem[4,u] = 0;
}

//Main Menu

main = 0;


menuItem[main,0] = "Play";
menuItem[main,1] = "Profiles";
menuItem[main,2] = "Settings";
menuItem[main,3] = "Quit";



numSubItems[main,0] = 0;
numSubItems[main,1] = 0;
numSubItems[main,2] = 0;
numSubItems[main,3] = 0;

//Pause Menu

pause = 1;

currentItem[pause] = 0;

menuItem[pause,0] = "Resume";
menuItem[pause,1] = "Settings";
menuItem[pause,2] = "Exit to main menu";
menuItem[pause,3] = "Quit";




numSubItems[pause,0] = 0;
numSubItems[pause,1] = 0;
numSubItems[pause,2] = 0;
numSubItems[pause,3] = 0;

//Profiles Menu

profiles = 5;


menuItem[profiles,0] = "Back";
menuItem[profiles,1] = "Current Profile";/*
menuItem[profiles,2] = "Exit to main menu";
menuItem[profiles,3] = "Quit";
*/



numSubItems[profiles,0] = 0;
numSubItems[profiles,1] = 0;/*
numSubItems[pause,2] = 0;
numSubItems[pause,3] = 0;
*/
//Settings Menu

settings = 2;


menuItem[settings,0] = "Back";
menuItem[settings,1] = "Gameplay";
menuItem[settings,2] = "Graphics";
menuItem[settings,3] = "Audio";

numSubItems[settings,0] = 0;
numSubItems[settings,1] = 0;
numSubItems[settings,2] = 0;
numSubItems[settings,3] = 0;

//Gameplay Menu

gameplay = 3;


menuItem[gameplay,0] = "Back";
menuItem[gameplay,1] = "Input";
menuItem[gameplay,2] = "Key Binds";

numSubItems[gameplay,0] = 0;
numSubItems[gameplay,1] = 2;
numSubItems[gameplay,2] = 0;

currentSubItem[gameplay,1] = 0;

subItemCount[gameplay,1] = 3;

//input = subItemCount[gameplay,1];

inputItem[0] = "Keyboard and Mouse";
inputItem[1] = "Controller";

//Graphics Menu

graphics = 4;


menuItem[graphics,0] = "Back";
menuItem[graphics,1] = "Fullscreen";
menuItem[graphics,2] = "Aspect Ratio";
menuItem[graphics,3] = "Resolution";
menuItem[graphics,4] = "Apply and Save";

numSubItems[graphics,0] = 0;
numSubItems[graphics,1] = 2;
numSubItems[graphics,2] = 4;
numSubItems[graphics,4] = 0;

currentSubItem[graphics,0] = 0;
currentSubItem[graphics,1] = 0;
currentSubItem[graphics,2] = 0;
currentSubItem[graphics,3] = 0;
currentSubItem[graphics,4] = 0;

subItemCount[graphics,1] = 0;
subItemCount[graphics,2] = 1;
subItemCount[graphics,3] = 2;

fullscreen = subItemCount[graphics,1];

subItem[fullscreen,0] = "On";
subItem[fullscreen,1] = "Off";

aspectRatio = subItemCount[graphics,2];

subItem[aspectRatio,0] = "Auto(" + autoRatio + ")";
subItem[aspectRatio,1] = "16:9";
subItem[aspectRatio,2] = "16:10";
subItem[aspectRatio,3] = "4:3";




//BUG It's not recognizing this. It's putting in the fullscreen stuff instead
/*resolution = subItemCount[graphics,3];

subItem[resolution,0] = "Test";
*/
if subItem[aspectRatio,currentSubItem[graphics,2]] = "Auto(" + autoRatio + ")" {
    resolutionItem[0] = "Auto(" + autoResolution + ")";
    switch autoRatio {  
        case "16:9":
            resolutionItem[1] = "1920x1080";
            resolutionItem[2] = "1600x900";
            resolutionItem[3] = "1366x768";
            resolutionItem[4] = "1280x720";
            resolutionItem[5] = "852x480";
            numSubItems[graphics,3] = 6;
        break;
        case "16:10":
            resolutionItem[1] = "1728x1080";
            resolutionItem[2] = "1680x1050";
            resolutionItem[3] = "1440x900";
            resolutionItem[4] = "1280x800";
            numSubItems[graphics,3] = 5;
        break;
        case "4:3":
            resolutionItem[1] = "1440x1080";
            resolutionItem[2] = "1400x1050";
            resolutionItem[3] = "1280x960";
            resolutionItem[4] = "1152x864";
            resolutionItem[5] = "1024x768";
            resolutionItem[6] = "800x600";
            resolutionItem[7] = "640x480";
            numSubItems[graphics,3] = 8;
        break;
        default:
            numSubItems[graphics,3] = 1;
        break;
    }
} else {
    switch subItem[aspectRatio,currentSubItem[graphics,2]] {  
        case "16:9":
            resolutionItem[0] = "1920x1080";
            resolutionItem[1] = "1600x900";
            resolutionItem[2] = "1366x768";
            resolutionItem[3] = "1280x720";
            resolutionItem[4] = "852x480";
            numSubItems[graphics,3] = 5;
        break;
        case "16:10":
            resolutionItem[0] = "1728x1080";
            resolutionItem[1] = "1680x1050";
            resolutionItem[2] = "1440x900";
            resolutionItem[3] = "1280x800";
            numSubItems[graphics,3] = 4;
        break;
        case "4:3":
            resolutionItem[0] = "1440x1080";
            resolutionItem[1] = "1400x1050";
            resolutionItem[2] = "1280x960";
            resolutionItem[3] = "1152x864";
            resolutionItem[4] = "1024x768";
            resolutionItem[5] = "800x600";
            resolutionItem[6] = "640x480";
            numSubItems[graphics,3] = 7;
        break;
        default:
            resolutionItem[0] = autoResolution;
            numSubItems[graphics,3] = 1;
        break;
    }
}




/*
resolution = 2//subItemCount[graphics,3];

subItem[resolution,0] = "Auto(" + autoResolution + ")";
subItem[resolution,1] = "16:9"

/*
switch autoRatio {
    case "16:9":
        numSubItems[graphics,3] = 2;
        subItem[resolution,0] = "Auto(" + autoResolution + ")";
        subItem[resolution,1] = "16:9";
    break;
    case "16:10":
    
    break;
    case "4:3":
    
    break;
    default:
        numSubItems[graphics,3] = 1;
        subItem[resolution,0] = "Auto(" + string(display_get_width()) + "x" + string(display_get_height()) + ")";
    break;
}
*/
//


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !menuEnabled[currentPlayer] {
    if vertMove &lt; -controllerThreshold {
        if (currentItem[currentMenu,0] = 0) {
            currentItem[currentMenu,0] = array_length_2d(menuItem,currentMenu)-1;
        } else {
            currentItem[currentMenu,0]--;
        }
        alarm[0] = 3;
    } else if vertMove &gt; controllerThreshold{
        if (currentItem[currentMenu,0] = array_length_2d(menuItem,currentMenu)-1) {
            currentItem[currentMenu,0] = 0;
        } else {
            currentItem[currentMenu,0]++;
        }
        alarm[0] = 5;
    }
}

if !subEnabled[currentPlayer] {
if horizMove &lt; -controllerThreshold {
    if (currentSubItem[currentMenu,currentItem[currentMenu]] = 0) {
        currentSubItem[currentMenu,currentItem[currentMenu]] = subItemCount[currentMenu,currentItem[currentMenu]]-1;
    } else {
        currentSubItem[currentMenu,currentItem[currentMenu]]--;
    }
    subEnabled[0] = false;
    alarm[1] = 5;
} else if horizMove &gt; controllerThreshold{
    if (currentSubItem[currentMenu,currentItem[currentMenu]] = subItemCount[currentMenu,currentItem[currentMenu]]-1) {
        currentSubItem[currentMenu,currentItem[currentMenu]] = 0;
    } else {
        currentSubItem[currentMenu,currentItem[currentMenu]]++;
    }
    subEnabled[0] = false;
    alarm[1] = 5;
}


subChanged[0] = false;

if subItem[aspectRatio,currentSubItem[graphics,2]] = "Auto(" + autoRatio + ")" {
    resolutionItem[0] = "Auto(" + autoResolution + ")";
    switch autoRatio {  
        case "16:9":
            resolutionItem[1] = "1920x1080";
            resolutionItem[2] = "1600x900";
            resolutionItem[3] = "1366x768";
            resolutionItem[4] = "1280x720";
            resolutionItem[5] = "852x480";
            numSubItems[graphics,3] = 6;
        break;
        case "16:10":
            resolutionItem[1] = "1728x1080";
            resolutionItem[2] = "1680x1050";
            resolutionItem[3] = "1440x900";
            resolutionItem[4] = "1280x800";
            numSubItems[graphics,3] = 5;
        break;
        case "4:3":
            resolutionItem[1] = "1440x1080";
            resolutionItem[2] = "1400x1050";
            resolutionItem[3] = "1280x960";
            resolutionItem[4] = "1152x864";
            resolutionItem[5] = "1024x768";
            resolutionItem[6] = "800x600";
            resolutionItem[7] = "640x480";
            numSubItems[graphics,3] = 8;
        break;
        default:
            numSubItems[graphics,3] = 1;
        break;
    }
} else {
    switch subItem[aspectRatio,currentSubItem[graphics,2]] {  
        case "16:9":
            resolutionItem[0] = "1920x1080";
            resolutionItem[1] = "1600x900";
            resolutionItem[2] = "1366x768";
            resolutionItem[3] = "1280x720";
            resolutionItem[4] = "852x480";
            numSubItems[graphics,3] = 5;
        break;
        case "16:10":
            resolutionItem[0] = "1728x1080";
            resolutionItem[1] = "1680x1050";
            resolutionItem[2] = "1440x900";
            resolutionItem[3] = "1280x800";
            numSubItems[graphics,3] = 4;
        break;
        case "4:3":
            resolutionItem[0] = "1440x1080";
            resolutionItem[1] = "1400x1050";
            resolutionItem[2] = "1280x960";
            resolutionItem[3] = "1152x864";
            resolutionItem[4] = "1024x768";
            resolutionItem[5] = "800x600";
            resolutionItem[6] = "640x480";
            numSubItems[graphics,3] = 7;
        break;
        default:
            resolutionItem[0] = autoResolution;
            numSubItems[graphics,3] = 1;
        break;
    }
}
}
//selectEnabled[0] = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (currentPlayer=0;currentPlayer&lt;global.numPlayers;currentPlayer++) {
    if selectEnabled[currentPlayer] and global.menuSwitch[currentPlayer] and root = pause{
        /*if global.pause {
            global.pause = false;
            selectEnabled = false;
        } else {
            global.pause = true;
            selectEnabled = false;
        }*/
        show_message("yo");
    }
    
    if global.pause[currentPlayer] {
        /*subItem[resolution,0] = "Auto(" + autoResolution + ")";
        subItem[resolution,1] = "16:9"*/
        
        if (global.movementControls[currentPlayer] = "Keyboard") {
            horizMove = global.rightMenu[currentPlayer] - global.leftMenu[currentPlayer];
            vertMove = global.downMenu[currentPlayer] - global.upMenu[currentPlayer];
            select = global.select[currentPlayer];
            if leftReleased {
                leftReleased = false;
                item = floor((mouse_y - 200) / 70);
                if item &gt;= 0 and item &lt; array_length_2d(menuItem,currentMenu) {
                    sub = mouse_x;
                    if (sub &lt;= view_xview[currentPlayer] + view_wview[currentPlayer] / 2 + string_width(menuItem[currentMenu,item]) / 2) and (sub &gt;= view_xview[currentPlayer] + view_wview[currentPlayer] / 2 - string_width(menuItem[currentMenu,item]) / 2) {
                        select = 1;
                        currentItem[currentPlayer,currentPlayer] = item;
                    }
                }
                
            }
            
        }
            
        if vertMove &gt; -controllerThreshold and vertMove &lt; controllerThreshold {
            menuEnabled[currentPlayer] = true;
        }
        if horizMove &gt; -controllerThreshold and horizMove &lt; controllerThreshold {
            subEnabled[currentPlayer] = true;
        }
        
        if menuEnabled[currentPlayer] {
            if vertMove &lt; -controllerThreshold {
                if (currentItem[currentMenu,currentPlayer] = 0) {
                    currentItem[currentMenu,currentPlayer] = array_length_2d(menuItem,currentMenu)-1;
                } else {
                    currentItem[currentMenu,currentPlayer]--;
                }
                menuEnabled[currentPlayer] = false;
                alarm[currentPlayer] = vertMove * 20;
            } else if vertMove &gt; controllerThreshold{
                if (currentItem[currentMenu,currentPlayer] = array_length_2d(menuItem,currentMenu)-1) {
                    currentItem[currentMenu,currentPlayer] = 0;
                } else {
                    currentItem[currentMenu,currentPlayer]++;
                }
                menuEnabled[currentPlayer] = false;
                alarm[currentPlayer] = vertMove * 20;
            }
            
            
            
        }
        
        
     
        if subEnabled[currentPlayer] and numSubItems[currentMenu,currentItem[currentMenu]] &gt; 0 {
            if horizMove &lt; -controllerThreshold {
                if (currentSubItem[currentMenu,currentItem[currentMenu]] = 0) {
                    currentSubItem[currentMenu,currentItem[currentMenu]] = numSubItems[currentMenu,currentItem[currentMenu]]-1;
                } else {
                    currentSubItem[currentMenu,currentItem[currentMenu]]--;
                }
                subEnabled[currentPlayer] = false;
                subChanged[currentPlayer] = true;
                alarm[currentPlayer] = horizMove * 20;
            } else if horizMove &gt; controllerThreshold{
                if (currentSubItem[currentMenu,currentItem[currentMenu]] = numSubItems[currentMenu,currentItem[currentMenu]]-1) {
                    currentSubItem[currentMenu,currentItem[currentMenu]] = 0;
                } else {
                    currentSubItem[currentMenu,currentItem[currentMenu]]++;
                }
                subEnabled[0] = false;
                subChanged[0] = true;
                alarm[currentPlayer] = horizMove * 20;
            }
        }
        
        if (global.movementControls[currentPlayer] = "Keyboard") {
            mouseThreshold = 2;
            
            if prevMouseX &gt;= mouse_x + mouseThreshold or prevMouseX &lt;= mouse_x - mouseThreshold {
                item = floor((mouse_y - 200) / 70);
                if item &lt; 0 {
                    currentItem[currentMenu,currentPlayer] = 0;
                } else if item &gt;= array_length_2d(menuItem,currentMenu) {
                    currentItem[currentMenu,currentPlayer] = array_length_2d(menuItem,currentMenu) - 1;
                } else {
                    currentItem[currentMenu,currentPlayer] = item;
                }
                prevMouseX = mouse_x;
            }
            if prevMouseY &gt;= mouse_y + mouseThreshold or prevMouseY &lt;= mouse_y - mouseThreshold {
                item = floor((mouse_y - 200) / 70);
                if item &lt; 0 {
                    currentItem[currentMenu,currentPlayer] = 0;
                } else if item &gt;= array_length_2d(menuItem,currentMenu) {
                    currentItem[currentMenu,currentPlayer] = array_length_2d(menuItem,currentMenu) - 1;
                } else {
                    currentItem[currentMenu,currentPlayer] = item;
                }
                prevMouseY = mouse_y;
            }
        }
        
        
        
        if select &gt; 0 and selectEnabled[currentPlayer]{
            alarm[currentPlayer] = 5;
            selectEnabled[currentPlayer] = false;
            switch menuItem[currentMenu,currentItem[currentMenu]] {
                case "Play":
                    global.pause[currentPlayer] = false;
                    room_goto(rmLobby);
                break;
                case "Settings":
                    currentMenu = settings;
                    titleText = "Settings";
                break;
                case "Gameplay":
                    currentMenu = gameplay;
                    titleText = "Gameplay";
                break;
                case "Graphics":
                    currentMenu = graphics;
                    titleText = "Graphics";
                break;
                case "Audio":
                    //currentMenu = gameplay;
                break;
                case "Quit":
                    game_end();
                break;
                case "Back":
                    switch currentMenu {
                        case settings:
                            currentMenu = root;
                            titleText = rootTitleText;
                        break;
                        case gameplay:
                        case graphics:
                            currentMenu = settings;
                            titleText = "Settings";
                            currentMenu = settings;
                            titleText = "Settings";
                        break;
                    }
                break;
                default:
                if numSubItems[currentMenu,currentItem[currentMenu]] &gt; 0 {
                    if (currentSubItem[currentMenu,currentItem[currentMenu]] = numSubItems[currentMenu,currentItem[currentMenu]]-1) {
                        currentSubItem[currentMenu,currentItem[currentMenu]] = 0;
                        subChanged = true;
                    } else {
                        currentSubItem[currentMenu,currentItem[currentMenu]]++;
                        subChanged = true;
                    }
                }
                break;
            }
        }
        
        if subChanged[currentPlayer] {
            subChanged[currentPlayer] = false;
            
            if subItem[aspectRatio,currentSubItem[graphics,2]] = "Auto(" + autoRatio + ")" {
                resolutionItem[0] = "Auto(" + autoResolution + ")";
                
                currentSubItem[graphics,3] = 0;
                
                switch autoRatio {  
                    case "16:9":
                        resolutionItem[1] = "1920x1080";
                        resolutionItem[2] = "1600x900";
                        resolutionItem[3] = "1366x768";
                        resolutionItem[4] = "1280x720";
                        resolutionItem[5] = "852x480";
                        numSubItems[graphics,3] = 6;
                    break;
                    case "16:10":
                        resolutionItem[1] = "1728x1080";
                        resolutionItem[2] = "1680x1050";
                        resolutionItem[3] = "1440x900";
                        resolutionItem[4] = "1280x800";
                        numSubItems[graphics,3] = 5;
                    break;
                    case "4:3":
                        resolutionItem[1] = "1440x1080";
                        resolutionItem[2] = "1400x1050";
                        resolutionItem[3] = "1280x960";
                        resolutionItem[4] = "1152x864";
                        resolutionItem[5] = "1024x768";
                        resolutionItem[6] = "800x600";
                        resolutionItem[7] = "640x480";
                        numSubItems[graphics,3] = 8;
                    break;
                    default:
                        numSubItems[graphics,3] = 1;
                    break;
                }
            } else {
                currentSubItem[graphics,3] = 0;
                switch subItem[aspectRatio,currentSubItem[graphics,2]] {  
                    case "16:9":
                        resolutionItem[0] = "1920x1080";
                        resolutionItem[1] = "1600x900";
                        resolutionItem[2] = "1366x768";
                        resolutionItem[3] = "1280x720";
                        resolutionItem[4] = "852x480";
                        numSubItems[graphics,3] = 5;
                    break;
                    case "16:10":
                        resolutionItem[0] = "1728x1080";
                        resolutionItem[1] = "1680x1050";
                        resolutionItem[2] = "1440x900";
                        resolutionItem[3] = "1280x800";
                        numSubItems[graphics,3] = 4;
                    break;
                    case "4:3":
                        resolutionItem[0] = "1440x1080";
                        resolutionItem[1] = "1400x1050";
                        resolutionItem[2] = "1280x960";
                        resolutionItem[3] = "1152x864";
                        resolutionItem[4] = "1024x768";
                        resolutionItem[5] = "800x600";
                        resolutionItem[6] = "640x480";
                        numSubItems[graphics,3] = 7;
                    break;
                    default:
                        resolutionItem[0] = autoResolution;
                        numSubItems[graphics,3] = 1;
                    break;
                }
            }
        }
    }
    
    view_enabled[0] = true;
    view_visible[0] = true;
    
    view_wview[0] = resX;
    view_hview[0] = resY;
    
    view_wport[0] = resX;
    view_hport[0] = resY;
    
    if screenShake &gt; 0 {
        view_xview[currentPlayer] = random(30) - 15;
        view_yview[currentPlayer] = random(30) - 15;
        screenShake--;
    } else {
        view_xview[currentPlayer] = 0;
        view_yview[currentPlayer] = 0;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>leftReleased = true;

//screenShake = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rmMain) {
    for (i=0;i&lt;global.numPlayers;i++) {
        global.pause[i] = true;
    }
    

    currentMenu = main;
    titleText = "Project Redshift";
} else {
    for (i=0;i&lt;global.numPlayers;i++) {
        global.pause[i] = false;
    }
    
    global.pause[0] = true;
    global.pause[1] = true;
    
    currentMenu = pause;
    titleText = "Pause";
}

root = currentMenu;
rootTitleText = titleText;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (currentMenuDraw=0;currentMenuDraw&lt;global.numPlayers;currentMenuDraw++) {

    
    if global.pause[currentMenuDraw] and view_current = currentMenuDraw {
        
        
        draw_rectangle_color(view_xview[currentMenuDraw],view_yview[currentMenuDraw],view_xview[currentMenuDraw] + view_wview[currentMenuDraw],view_yview[currentMenuDraw] + view_hview[currentMenuDraw],c_orange,c_orange,c_orange,c_orange,0);
        draw_set_halign(fa_left);
        if currentMenu = main {
            draw_set_font(Arial12);
            draw_text(view_xview[currentMenuDraw],view_yview[currentMenuDraw],version);
        }
        
        draw_set_halign(fa_center);
        draw_set_font(Arial128);
        draw_text(view_wview[currentMenuDraw] / 2,view_yview[currentMenuDraw],titleText);
        draw_set_font(Arial64);
        
        draw_text(200,200,texttt);
        
        for (i=0;i&lt;array_length_2d(menuItem,currentMenu);i++) {
            if currentItem[currentMenu] = i {
                draw_set_color(c_white);
            } else {
                draw_set_color(c_black);
            }
            
    
            if menuItem[currentMenu,i] = "Resolution"{
                extraText = ": " + resolutionItem[currentSubItem[currentMenu,i]];
            } else if menuItem[currentMenu,i] = "Input"{
                extraText = ": " +inputItem[currentSubItem[currentMenu,i]];
             } else if numSubItems[currentMenu,i] &gt; 0 {
                extraText = ": " + subItem[subItemCount[currentMenu,currentItem[i]],currentSubItem[currentMenu,i]];
            } else {
                extraText = "";
            }
            draw_text(view_wview[currentMenuDraw] / 2,view_yview[currentMenuDraw] + 200 + i*70,menuItem[currentMenu,i] + extraText);
            draw_set_color(c_black);
        }
    }
}
//subItemCount[graphics,1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
